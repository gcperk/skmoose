[{"path":"https://gcperk.github.io/skmoose/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"Apache License","title":"Apache License","text":"Version 2.0, January 2004 <http://www.apache.org/licenses/>","code":""},{"path":[]},{"path":"https://gcperk.github.io/skmoose/LICENSE.html","id":"id_1-definitions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"1. Definitions","title":"Apache License","text":"“License” shall mean terms conditions use, reproduction, distribution defined Sections 1 9 document. “Licensor” shall mean copyright owner entity authorized copyright owner granting License. “Legal Entity” shall mean union acting entity entities control, controlled , common control entity. purposes definition, “control” means () power, direct indirect, cause direction management entity, whether contract otherwise, (ii) ownership fifty percent (50%) outstanding shares, (iii) beneficial ownership entity. “” (“”) shall mean individual Legal Entity exercising permissions granted License. “Source” form shall mean preferred form making modifications, including limited software source code, documentation source, configuration files. “Object” form shall mean form resulting mechanical transformation translation Source form, including limited compiled object code, generated documentation, conversions media types. “Work” shall mean work authorship, whether Source Object form, made available License, indicated copyright notice included attached work (example provided Appendix ). “Derivative Works” shall mean work, whether Source Object form, based (derived ) Work editorial revisions, annotations, elaborations, modifications represent, whole, original work authorship. purposes License, Derivative Works shall include works remain separable , merely link (bind name) interfaces , Work Derivative Works thereof. “Contribution” shall mean work authorship, including original version Work modifications additions Work Derivative Works thereof, intentionally submitted Licensor inclusion Work copyright owner individual Legal Entity authorized submit behalf copyright owner. purposes definition, “submitted” means form electronic, verbal, written communication sent Licensor representatives, including limited communication electronic mailing lists, source code control systems, issue tracking systems managed , behalf , Licensor purpose discussing improving Work, excluding communication conspicuously marked otherwise designated writing copyright owner “Contribution.” “Contributor” shall mean Licensor individual Legal Entity behalf Contribution received Licensor subsequently incorporated within Work.","code":""},{"path":"https://gcperk.github.io/skmoose/LICENSE.html","id":"id_2-grant-of-copyright-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"2. Grant of Copyright License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable copyright license reproduce, prepare Derivative Works , publicly display, publicly perform, sublicense, distribute Work Derivative Works Source Object form.","code":""},{"path":"https://gcperk.github.io/skmoose/LICENSE.html","id":"id_3-grant-of-patent-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"3. Grant of Patent License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable (except stated section) patent license make, made, use, offer sell, sell, import, otherwise transfer Work, license applies patent claims licensable Contributor necessarily infringed Contribution(s) alone combination Contribution(s) Work Contribution(s) submitted. institute patent litigation entity (including cross-claim counterclaim lawsuit) alleging Work Contribution incorporated within Work constitutes direct contributory patent infringement, patent licenses granted License Work shall terminate date litigation filed.","code":""},{"path":"https://gcperk.github.io/skmoose/LICENSE.html","id":"id_4-redistribution","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"4. Redistribution","title":"Apache License","text":"may reproduce distribute copies Work Derivative Works thereof medium, without modifications, Source Object form, provided meet following conditions: () must give recipients Work Derivative Works copy License; (b) must cause modified files carry prominent notices stating changed files; (c) must retain, Source form Derivative Works distribute, copyright, patent, trademark, attribution notices Source form Work, excluding notices pertain part Derivative Works; (d) Work includes “NOTICE” text file part distribution, Derivative Works distribute must include readable copy attribution notices contained within NOTICE file, excluding notices pertain part Derivative Works, least one following places: within NOTICE text file distributed part Derivative Works; within Source form documentation, provided along Derivative Works; , within display generated Derivative Works, wherever third-party notices normally appear. contents NOTICE file informational purposes modify License. may add attribution notices within Derivative Works distribute, alongside addendum NOTICE text Work, provided additional attribution notices construed modifying License. may add copyright statement modifications may provide additional different license terms conditions use, reproduction, distribution modifications, Derivative Works whole, provided use, reproduction, distribution Work otherwise complies conditions stated License.","code":""},{"path":"https://gcperk.github.io/skmoose/LICENSE.html","id":"id_5-submission-of-contributions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"5. Submission of Contributions","title":"Apache License","text":"Unless explicitly state otherwise, Contribution intentionally submitted inclusion Work Licensor shall terms conditions License, without additional terms conditions. Notwithstanding , nothing herein shall supersede modify terms separate license agreement may executed Licensor regarding Contributions.","code":""},{"path":"https://gcperk.github.io/skmoose/LICENSE.html","id":"id_6-trademarks","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"6. Trademarks","title":"Apache License","text":"License grant permission use trade names, trademarks, service marks, product names Licensor, except required reasonable customary use describing origin Work reproducing content NOTICE file.","code":""},{"path":"https://gcperk.github.io/skmoose/LICENSE.html","id":"id_7-disclaimer-of-warranty","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"7. Disclaimer of Warranty","title":"Apache License","text":"Unless required applicable law agreed writing, Licensor provides Work (Contributor provides Contributions) “” BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied, including, without limitation, warranties conditions TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS PARTICULAR PURPOSE. solely responsible determining appropriateness using redistributing Work assume risks associated exercise permissions License.","code":""},{"path":"https://gcperk.github.io/skmoose/LICENSE.html","id":"id_8-limitation-of-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"8. Limitation of Liability","title":"Apache License","text":"event legal theory, whether tort (including negligence), contract, otherwise, unless required applicable law (deliberate grossly negligent acts) agreed writing, shall Contributor liable damages, including direct, indirect, special, incidental, consequential damages character arising result License use inability use Work (including limited damages loss goodwill, work stoppage, computer failure malfunction, commercial damages losses), even Contributor advised possibility damages.","code":""},{"path":"https://gcperk.github.io/skmoose/LICENSE.html","id":"id_9-accepting-warranty-or-additional-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"9. Accepting Warranty or Additional Liability","title":"Apache License","text":"redistributing Work Derivative Works thereof, may choose offer, charge fee , acceptance support, warranty, indemnity, liability obligations /rights consistent License. However, accepting obligations, may act behalf sole responsibility, behalf Contributor, agree indemnify, defend, hold Contributor harmless liability incurred , claims asserted , Contributor reason accepting warranty additional liability. END TERMS CONDITIONS","code":""},{"path":"https://gcperk.github.io/skmoose/LICENSE.html","id":"appendix-how-to-apply-the-apache-license-to-your-work","dir":"","previous_headings":"","what":"APPENDIX: How to apply the Apache License to your work","title":"Apache License","text":"apply Apache License work, attach following boilerplate notice, fields enclosed brackets [] replaced identifying information. (Don’t include brackets!) text enclosed appropriate comment syntax file format. also recommend file class name description purpose included “printed page” copyright notice easier identification within third-party archives.","code":"Copyright [yyyy] [name of copyright owner]  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."},{"path":"https://gcperk.github.io/skmoose/articles/Moose_survey.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Moose_survey","text":"package assists determining moose quality extent usable habitat block given study area. vignette provides detailed version functions step component process.","code":""},{"path":"https://gcperk.github.io/skmoose/articles/Moose_survey.html","id":"preparation","dir":"Articles","previous_headings":"Introduction","what":"Preparation","title":"Moose_survey","text":"Firstly read survey block layout. Ideally geospatial file .gpkg format, however helper function provide convert .shp file .gpkg. example data set provided within package. workflow use example dataset, however notes provided assist using data set. Read file generate individual block id number Create output folder want raw data geo spatial data saved. Note folder generated block number (labelled numerically). can now begin extract base data block. uses bcdata bcmaps package pull data directly bcdata catalogue. process set iterate block. fast, provides stable method reduce incidence timing large data downloads, specifically VRI dataset. WARNING: time consuming part process take time run extracting many blocks. Best run overnight.","code":"# read in the test data   data_location <- fs::path_package(\"extdata\", package = \"skmoose\") data_file <- skmoose::skmoose_example() bks_name <- file.path(data_location, data_file)  # Alternatively you can read in an entire data set by pointing to the file location as shown below:   bks_name <- file.path(\"C:\\\\Users\\\\genev\\\\OneDrive\\\\Documents\\\\02.Contracts\\\\2023_oddjobs\\\\2023_moose_block_surveyR\\\\02.Data\\\\Tweedsmuir-SRBblocks.gpkg\") # read in and format the data  aoi <- sf::st_read(file.path(bks_name)) aoi <- aoi %>%   dplyr::mutate(bkname = seq(1,length(aoi$Name), 1)) %>%   dplyr::select(bkname)%>%   st_zm()  # generate a list with all unique block numbers to be used to iterate through the spatial extraction  blockno <- as.list(unique(aoi$bkname)) # create an output folder:  out_dir <- \"C:\\\\Users\\\\genev\\\\OneDrive\\\\Documents\\\\02.Contracts\\\\2023_oddjobs\\\\2023_moose_block_surveyR\\\\02.Data\\\\data\"   # check if the folder already exists and if it doesn't create a folder if (!dir.exists(out_dir )){   dir.create(out_dir ) }else{   print(\"dir exists\") }  # write out a copy of the full aoi  sf::st_write(aoi, file.path(out_dir, \"aoi.gpkg\"), append = FALSE) # set up parrallel processing parameters registerDoSEQ()  # loop through each block and extract the spatial basedata. These will be filtered based on criteria provided  # and a copy saved under the respective file folder.    basedata <- foreach(x = blockno[38:43]) %dopar% {      # test line - if you want to run a single block    #x = blockno[42] #42, #50, #38   print(x)      tmp_aoi <- aoi %>% dplyr::filter(bkname == x)    #st_bbox(tmp_aoi)   temp_out_dir <- file.path(out_dir, x)          if (!dir.exists(temp_out_dir)){         dir.create(temp_out_dir )       }else{         print(\"dir exists\")       }        get_basedata(in_aoi = tmp_aoi, out_path = temp_out_dir, overwrite = FALSE)      #print(x)    }"},{"path":"https://gcperk.github.io/skmoose/articles/Moose_survey.html","id":"extract-uninhabitable-area","dir":"Articles","previous_headings":"Introduction","what":"Extract uninhabitable area","title":"Moose_survey","text":"base data extracted can filter uninhabitable areas moose. includes : Rock Ice Waterbodies >1 km2 Elevations >1300 m Slopes >55 degrees sections within study area meet criteria saved new .gpkg within folder particular block. additional files written , criteria met.","code":"# set thresholds  eval_threshold = 1300 slope_threshold = 55   uninhab <- foreach(x = blockno[38:43]) %dopar% {      #x = blockno[26]      tmp_aoi <- aoi %>% dplyr::filter(bkname == x)   temp_out_dir <- file.path(out_dir, x)          # 1. extract rock and ice areas        rockice <- st_read(file.path(temp_out_dir, \"vri.gpkg\")) %>%       dplyr::filter(BCLCS_LEVEL_3 == \"A\") %>%       dplyr::select(id) %>%       st_union()%>%       st_cast(\"MULTIPOLYGON\")           if(length(st_is_empty(rockice)< 1)){       sf::st_write(rockice, file.path(temp_out_dir, \"rockice.gpkg\"), append = FALSE)}    # 2. filter lakes with >1 km2   if(file.exists(file.path(temp_out_dir,\"lakes.gpkg\"))){   largelakes <- st_read(file.path(temp_out_dir, \"lakes.gpkg\")) %>%       dplyr::filter(AREA_HA > 100) %>%       st_union()       if(length(st_is_empty(largelakes)< 1)){     st_write(largelakes, file.path(temp_out_dir, \"largelakes.gpkg\"), append = FALSE)} }   # 3. filter elevations above threshold value    trim <- terra::rast(file.path(temp_out_dir, \"dem.tif\"))   high_elev_sf <- high_elev(trim, eval_threshold )      if(length(st_is_empty(high_elev_sf )< 1)){     st_write(high_elev_sf , file.path(temp_out_dir, \"high_elevation.gpkg\"), append = FALSE)     }    # 4. filter high slope        steep_sf <- steep_slope(trim, slope_threshold)        if(length(st_is_empty(steep_sf )< 1)){    st_write(steep_sf, file.path(temp_out_dir, \"steep.gpkg\"), append = FALSE)    }   }"},{"path":"https://gcperk.github.io/skmoose/articles/Moose_survey.html","id":"combine-uninhabitable-area-","dir":"Articles","previous_headings":"Introduction","what":"Combine uninhabitable area.","title":"Moose_survey","text":"block combine uninhabitable area single polygon clip block boundary. output file called “uninhabitable.gpkg”","code":"# merge uninhabitable area   uninhab <- foreach(x = blockno[38:43]) %dopar% {     # x = blockno[1]   print(x)      tmp_aoi <- aoi %>% dplyr::filter(bkname == x)   temp_out_dir <- file.path(out_dir, x)      merge_nonhabit(tmp_aoi, temp_out_dir)        }"},{"path":"https://gcperk.github.io/skmoose/articles/Moose_survey.html","id":"extract-moose-habitat","dir":"Articles","previous_headings":"Introduction","what":"Extract Moose Habitat","title":"Moose_survey","text":"now compiled moose habitat areas. involves reading base data filtering Deciduous tree species, queried VRI: [SPECIES_CD LIKE ‘%’ SPECIES_CD = ‘EP’ SPECIES_CD = ‘SB’ SPECIES__1 LIKE ‘%’ SPECIES__1 = ‘EP’ SPECIES__1 = ‘SB’ SPECIES__3 LIKE ‘%’ SPECIES__3 = ‘EP’ SPECIES__3 =‘SB’ SPECIES__5 LIKE ‘%’ SPECIES__5 LIKE ‘E%’] Early seral/shrub dynamic habitats: Fires >5 <40 years old Cutblocks >5 < 40 years old Buffered 3-8 order streams FWA stream dataset 150m (dissolved) 9th order streams buffered 500 meters. o Wetlands FWA ≤ 1 km2 o Skeena Wildlife Ecological Resource Model- Winter forage output","code":"# set thresholds cutblock_min_yr = 5 cutblock_max_yr = 25 fire_min_yr = 10 fire_max_yr = 25  habitable <- foreach(x = blockno[38:43]) %dopar% {       #x = blockno[42]     print(x)        tmp_aoi <- aoi %>% dplyr::filter(bkname == x)     temp_out_dir <- file.path(out_dir, x)      # get deciduous leading species     vri <- st_read(file.path(temp_out_dir, \"vri.gpkg\"),quiet = TRUE)     species_codes = c(\"AT\", \"AC\",\"EP\",\"SB\")     decid <- vri_browse(vri, species_codes)      if(length(st_is_empty(decid)< 1)){         print(\"contains deciduous\")     st_write(decid , file.path(temp_out_dir, \"vri_decid.gpkg\") , append = FALSE,quiet = TRUE)     }         # get recent harvest      if(\"cutblocks.gpkg\"  %in% list.files(temp_out_dir)){          cutblocks <- st_read(file.path(temp_out_dir, \"cutblocks.gpkg\"),quiet = TRUE)       cutblocks_yrs <- cutblocks_recent(cutblocks, cutblock_min_yr, cutblock_max_yr)            if(length(st_is_empty(cutblocks_yrs)) > 0 ){        print(\"contains cutblocks\")     st_write(cutblocks_yrs, file.path(temp_out_dir, \"cutblocks_filtered.gpkg\"), quiet = TRUE, append = FALSE)     }   }      # get recent fire years      if(\"fire.gpkg\" %in% list.files(temp_out_dir)){   fires <- st_read(file.path(temp_out_dir, \"fire.gpkg\"),quiet = TRUE)   fires_filtered <- fires_recent(fires, fire_min_yr, fire_max_yr)       if(length(st_is_empty(fires_filtered)) > 0 ){             print(\"contains fire\")         st_write( fires_filtered, file.path(temp_out_dir, \"fires_filtered.gpkg\"), append = FALSE,quiet = TRUE)       }    }             # get stream order and buffer by stream order, stream order 3 - 8 is 150m buffer, stream order 9 bufferd by 500m        if(\"streams.gpkg\"  %in% list.files(temp_out_dir)){      streams <- st_read(file.path(temp_out_dir, \"streams.gpkg\"), quiet = TRUE)      stream38 <- buffer_streams(streams)     stream9 <- buffer_streams(streams, 9, 500)             if(length(st_is_empty(stream38 )) > 0 ){         print(\"contains streams\")    st_write(stream38 , file.path(temp_out_dir, \"streams3_8.gpkg\"),quiet = TRUE, append = FALSE) }      if(length(st_is_empty(stream9 )) > 0 ){    st_write(stream9 , file.path(temp_out_dir, \"streams9.gpkg\"), quiet = TRUE, append = FALSE) }              }       # select small lakes and all wetlands (previously filtered to < 100 Ha Area.          if(\"lakes.gpkg\" %in% list.files(temp_out_dir)){    smalllakes <- st_read(file.path(temp_out_dir, \"lakes.gpkg\"),quiet = TRUE)%>%      dplyr::filter(AREA_HA < 100) %>%      st_union()          if(length(st_is_empty(smalllakes)) > 0 ){      print(\"contains lakes\")   st_write(smalllakes, file.path(temp_out_dir, \"smalllakes.gpkg\"), quiet = TRUE, append = FALSE)       }    }         }"},{"path":"https://gcperk.github.io/skmoose/articles/Moose_survey.html","id":"merge-habitable-layers-into-single-file-per-block","dir":"Articles","previous_headings":"Introduction","what":"Merge habitable layers into single file per block","title":"Moose_survey","text":"block combine outputs single moose habitat layer called “habitat.gpkg”.","code":"# merge uninhabitable area   habitable <- foreach(x = blockno[38:43]) %dopar% {      #x = blockno[42]      tmp_aoi <- aoi %>% dplyr::filter(bkname == x)   temp_out_dir <- file.path(out_dir, x)      merge_habit(tmp_aoi, temp_out_dir)        # remove an uninhabitable areas from within habitable       if(file.exists(file.path(temp_out_dir,\"uninhabitable.gpkg\"))){        uninh <- st_read(file.path(temp_out_dir, \"uninhabitable.gpkg\"),quiet = TRUE)      hab <- st_read(file.path(temp_out_dir, \"habitable.gpkg\"),quiet = TRUE)        habit <- st_intersection(uninh,  hab)     final_hab <- st_difference(hab, uninh)     st_write(final_hab, file.path(temp_out_dir, \"habitable.gpkg\"), quiet = TRUE, append = FALSE)        }      }"},{"path":"https://gcperk.github.io/skmoose/articles/Moose_survey.html","id":"check-for-burn-severity-extents","dir":"Articles","previous_headings":"","what":"Check for Burn Severity extents","title":"Moose_survey","text":"Calculate burn severity plots put gpkg called","code":"burn_strat <- foreach(x = blockno[38:43]) %dopar% {      #x = blockno[42]      tmp_aoi <- aoi %>% dplyr::filter(bkname == x)   temp_out_dir <- file.path(out_dir, x)      # merge_habit(tmp_aoi, temp_out_dir)   # remove an uninhabitable areas from within habitable       if(file.exists(file.path(temp_out_dir,\"fire_int.gpkg\"))){        fire_int <- st_read(file.path(temp_out_dir, \"fire_int.gpkg\"),quiet = TRUE)%>%        sf::st_union()            if(file.exists(file.path(temp_out_dir,\"streams3_8.gpkg\"))){             stream <- st_read(file.path(temp_out_dir, \"streams3_8.gpkg\"),quiet = TRUE)              non_wet_fire<- rmapshaper::ms_erase(fire_int, stream)             } else {                non_wet_fire <- fire_int              }          #final_hab <- st_difference(hab, uninh)     st_write(non_wet_fire, file.path(temp_out_dir, \"non_wet_fire.gpkg\"), quiet = TRUE, append = FALSE)         }      }"},{"path":"https://gcperk.github.io/skmoose/articles/Moose_survey.html","id":"calculate-areas-for-habitat-and-non-habitable","dir":"Articles","previous_headings":"Check for Burn Severity extents","what":"Calculate areas for habitat and non-habitable","title":"Moose_survey","text":"block read habitable inhabitable areas calculate areas proportions block. table ","code":"out_table <- calculate_areas(blockno, aoi, out_dir)  write.csv(out_table, file.path(out_dir, \"moose_stratification_outputs_final.csv\"), row.names = FALSE)"},{"path":"https://gcperk.github.io/skmoose/articles/Moose_survey.html","id":"optional-moose-habitat-strata-classification","dir":"Articles","previous_headings":"Check for Burn Severity extents > Calculate areas for habitat and non-habitable","what":"Optional: Moose Habitat Strata Classification","title":"Moose_survey","text":"Assign Moose blocks stratification High, Medium, Low review. based Proportion Moose Habitat/Block Area (prop_habit_block_km2) Two proposed methods include 1) Assign values based set thresholds, .e: 0-40% =L, #41-70%= Moderate, 71-100%, 71-100% = High 2) Assign values based distribution block values.","code":"# Option 1: set thresholds based on the top value in each catergorty.  # Note you can adjust low, med and high values within the function  out <- assign_categories(out_table, low = 0.4, med = 0.7, high = 1, burn_strat = 0.5)   # OR # option 2:  estimate thresholds based on the quantiles ie:    outq <- assign_categories(out_table, quartile = TRUE)   write.csv(out, file.path(out_dir, \"moose_stratification_outputs_classed.csv\"), row.names = FALSE)   # write out a spatial output with blocks and values;   sp_out <- merge(aoi, out)  st_write(sp_out, file.path(out_dir, \"moose_stratification_output.gpkg\"),quiet = TRUE,append = FALSE) st_write(sp_out, file.path(out_dir, \"moose_stratification_output.shp\"),append = FALSE)"},{"path":"https://gcperk.github.io/skmoose/articles/Moose_telemetry_results.html","id":"read-in-the-catergorised-block-data","dir":"Articles","previous_headings":"","what":"read in the catergorised block data","title":"Telemetry_data","text":"Read file generate individual block id number","code":"# read in the test data   data_location <- fs::path_package(\"extdata\", package = \"skmoose\") data_file <- skmoose::skmoose_example() bks_name <- file.path(data_location, data_file)  # Alternatively you can read in an entire data set by pointing to the file location as shown below:   # create an output folder:  strat_dir <- \"C:\\\\Users\\\\genev\\\\OneDrive\\\\Documents\\\\02.Contracts\\\\2023_oddjobs\\\\2023_moose_block_surveyR\\\\02.Data\\\\data\"   # read in classified table classed <- read.csv(file.path(strat_dir, \"moose_stratification_outputs_classed.csv\"))   # read in blank aoi aoi <-  sf::st_read(file.path(strat_dir, \"aoi.gpkg\"))  # read in spatial statified blocks  sblk <- st_read(file.path(strat_dir, \"moose_stratification_output.gpkg\"))     # read in the gpkg # read in and format the data  aoi <- sf::st_read(file.path(bks_name)) aoi <- aoi %>%   dplyr::mutate(bkname = seq(1,length(aoi$Name), 1)) %>%   dplyr::select(bkname)%>%   st_zm()  # generate a list with all unique block numbers to be used to iterate through the spatial extraction  blockno <- as.list(unique(aoi$bkname))"},{"path":"https://gcperk.github.io/skmoose/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"package maintainer. Maintainer.","code":""},{"path":"https://gcperk.github.io/skmoose/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"person, c c= (2023). skmoose: Stratifies Moose Survey Blocks. R package version 0.1.0,  https://gcperk.github.io/skmoose/, https://github.com/gcperk/skmoose.","code":"@Manual{,   title = {skmoose: Stratifies Moose Survey Blocks},   author = {{person} and comment = c},   year = {2023},   note = {R package version 0.1.0,  https://gcperk.github.io/skmoose/},   url = {https://github.com/gcperk/skmoose}, }"},{"path":"https://gcperk.github.io/skmoose/index.html","id":"skeena-moose-survey-stratification","dir":"","previous_headings":"","what":"Stratifies Moose Survey Blocks","title":"Stratifies Moose Survey Blocks","text":"SKmoose used assess moose habitat quality within given survey blocks series criteria. package provides number functions extract data, estimate habitat inhabitable areas within block. output include 1) table (.csv) several habitat metrics per block, including habitat classification low, medium, high burnt. 2) spatial files (.shp .gpkg) habitat non_habitat areas block, along spatial files used calculations. possible, data used process extracted directly BC data catalogue, using bcdata bcmaps R packages ensure date information used. package written Skeena Region Ministry Water, Lands & Resources Stewardship. Optional additional data can extracted including confidential survey telemetry data, however dependent outside sources. vignette provided guide users. include detailed step step instruction functions package resulting csv table compiled results. test dataset provided within package assist understanding process.","code":""},{"path":"https://gcperk.github.io/skmoose/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Stratifies Moose Survey Blocks","text":"can install development version skmoose GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"ninoxconsulting/skmoose\")"},{"path":"https://gcperk.github.io/skmoose/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Stratifies Moose Survey Blocks","text":"Potential Moose habitat estimated survey block given area interest, based series criteria spatial data extracted bcdata catalogue. Uninhabitable areas also estimated using set criteria. spatial data extracted per block area rather entire study area improve efficiency processing. Appendix provides full list data references spatial queries. potential habitat inhabitable areas compiled, total areas (km2) calculated provide means stratifying moose survey blocks categories Low, Medium High. table calculations output user review. separate category (Burn) assigned blocks 50% block area classed high medium intensity fires (excluding wet areas, .e area overlaps buffered stream flow). classification based fires occured within last 10 years burn severity mapping available (2015 - 2022). November 1st 2023, 2023 fire severity mapping yet available included assessment. Note burn classification applied based criteria take account habitat uninhabitable calculations.","code":""},{"path":"https://gcperk.github.io/skmoose/index.html","id":"criteria-for-potential-moose-habiat","dir":"","previous_headings":"","what":"Criteria for potential Moose habiat","title":"Stratifies Moose Survey Blocks","text":"following criteria used estimate area moose habitat. compiled areas dissolved single polygon. Uninhabitable areas, calculated hey intersect habitat area removed final area calculations completed. Values shown bold default values, can adjusted using parameters within function. Deciduous tree species within VRI (vegetation resource inventory). default species include AC (Poplar), (Trembling Aspen), EP (Paper Birch), SB (Black Spruce), ie (c(“”, “AC”,“EP”,“SB”)). Early seral/shrub dynamic habitats - Harvest disturbance. includes blocks 5 yrs 25 yrs since disturbance. See Demars Serrouya, 2018. Early seral/shrub dynamic habitats - Fire disturbance. includes fires 10 yrs 25 yrs since disturbance. Proximity streams, streams orders 3 8 buffered 150m, streams order 9 buffered 500m. Small lakes wetlands less 1 km2. Elevation 1300m. Note collared moose using 1500m elevations winter, majority moose using elevations <1300 meters winter months.","code":""},{"path":"https://gcperk.github.io/skmoose/index.html","id":"criteria-for-uninhabitable-areas","dir":"","previous_headings":"","what":"Criteria for uninhabitable areas","title":"Stratifies Moose Survey Blocks","text":"Uninhabitable areas within landscape defined following criteria Rock Ice, Locations within vri designated alpine ( BCLCS_LEVEL_3 == “”) Large waterbodies greater 1km2 High elevation areas. default cutoff currently set areas 1300 m Steep slopes. default currently set greater 55 degrees.","code":""},{"path":"https://gcperk.github.io/skmoose/index.html","id":"calculate-proportion-of-moose-habitat","dir":"","previous_headings":"","what":"Calculate proportion of Moose habitat","title":"Stratifies Moose Survey Blocks","text":"area moose habitat uninhabitable areas calculated, estimate area combine single table (csv). table contains following fields: bk = block id number block_area_km2 = total area block m2 uninh_area_km2 = total uninhabitable area block (km2) prop_uninh_block = proportion uninhabitable area block (0-1). (uninh_area_km2/block_area_km2) net_habitat_area_km2 = net area habitat available within block (km2) (block_area_km2 - uninh_area_km2) hab_area_km2 = total habitable area within block (km2) prop_habit_block_km2 = proportion habitat within total area block (km2) (hab_area_km2/block_area_km2) prop_habit_net_habit_km2 = proportion habitat within net area block (hab_area_km2/net_habitat_area_km2) fire_int_area_km2 = total area (km2) contains high medium fires severity last 10 years (data available; ie 2015 - 2022 (November 1st 2023)) prop_fireint_block_km2 = Proportion high/medium fire intensity within total area block (km2)","code":""},{"path":"https://gcperk.github.io/skmoose/index.html","id":"optional-moose-habitat-strata-classification","dir":"","previous_headings":"","what":"OPTIONAL: Moose Habitat Strata Classification","title":"Stratifies Moose Survey Blocks","text":"Two options exist automate classify blocks Low/Medium/High categories based proportion Moose Habitat/Block Area (prop_habit_block_km2). Values can based specific numeric thresholds, default values low (0 - 0.4), medium (0.41 - 0.7) high (>0.71). Alternatively values can calculated based quartiles distribution, cutoff values selected based distribution values blocks.","code":""},{"path":"https://gcperk.github.io/skmoose/index.html","id":"calculate-blocks-with-high-burn-severity","dir":"","previous_headings":"","what":"Calculate Blocks with high burn severity.","title":"Stratifies Moose Survey Blocks","text":"blocks greater 0.5 proportion block area burnt (prop_fireint_block_km2), classifcation “Burnt” assigned block. irrespective area habitat inhabitable within block. threshold set 0.5  however can adjusted parameter within function. steps also produce table, optional spatial file review adjustment.","code":""},{"path":"https://gcperk.github.io/skmoose/index.html","id":"appendix-a","dir":"","previous_headings":"Calculate Blocks with high burn severity.","what":"Appendix A","title":"Stratifies Moose Survey Blocks","text":"following datasets used estimate habitat inhabitable areas. include: VRI. Vegetation Resource Inventory: Rock Ice (uninhabitable) filtered using British Columbia Land Cover Classification Scheme Level 3 values classed alpine. (BCLCS_LEVEL_3 = “”) VRI. Vegetation Resource Inventory: Deciduous tree species (habitat) filtered using following fields: “SPECIES_CD_1”, “SPECIES_CD_2”,“SPECIES_CD_3”,“SPECIES_CD_4”,“SPECIES_CD_5”,“SPECIES_CD_6”. default species interest include (c(“”, “AC”,“EP”,“SB”)). Lakes filtered area (AREA_HA) greater 1km2 (uninhabitable areas) also < 1km2 habitable area. wetlands area < 1kms combined small lakes potential moose habitat. stream network used determine buffer based stream order. fires historic fires current used estimate fires. Time since burn used filter miniumum maximum range include moose habitat. fire severity - year used estimate intensity recent fires. fire severity - historic used estimate intensity historic firest, starting 2015 onwards. cutblocks filterd usein minimum maximum time since harvest. digital elevation model (dem) used estimate elevation slope. extracted bcmaps packages uses TRIM DEM.","code":""},{"path":"https://gcperk.github.io/skmoose/reference/assign_categories.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign Moose Stratification categories\nAssign each block a high, medium or low category based on assigned values or quartile. — assign_categories","title":"Assign Moose Stratification categories\nAssign each block a high, medium or low category based on assigned values or quartile. — assign_categories","text":"Assign Moose Stratification categories Assign block high, medium low category based assigned values quartile.","code":""},{"path":"https://gcperk.github.io/skmoose/reference/assign_categories.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign Moose Stratification categories\nAssign each block a high, medium or low category based on assigned values or quartile. — assign_categories","text":"","code":"assign_categories(   out_table,   quartile = FALSE,   low = 0.4,   med = 0.7,   high = 1,   burn_strat = 0.5 )"},{"path":"https://gcperk.github.io/skmoose/reference/assign_categories.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign Moose Stratification categories\nAssign each block a high, medium or low category based on assigned values or quartile. — assign_categories","text":"out_table data frame moose stratification values quartile TRUE FALSE, FALSE categories based low, med, high parameters low numeric value assign highest value low category, default 0.4 med numeric value assign highest value medium category, default 0.7 high numeric value assign highest value high category, default 1 burn_strat numeric value threshold block classes \"burn_strat\", default 0.5","code":""},{"path":"https://gcperk.github.io/skmoose/reference/assign_categories.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign Moose Stratification categories\nAssign each block a high, medium or low category based on assigned values or quartile. — assign_categories","text":"data table","code":""},{"path":"https://gcperk.github.io/skmoose/reference/assign_categories.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assign Moose Stratification categories\nAssign each block a high, medium or low category based on assigned values or quartile. — assign_categories","text":"","code":"if (FALSE) { assign_categories(out_table, quartile = FALSE, low = 40, med = 70, high = 100) }"},{"path":"https://gcperk.github.io/skmoose/reference/buffer_streams.html","id":null,"dir":"Reference","previous_headings":"","what":"Buffer streams by stream order — buffer_streams","title":"Buffer streams by stream order — buffer_streams","text":"Buffer streams stream order","code":""},{"path":"https://gcperk.github.io/skmoose/reference/buffer_streams.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Buffer streams by stream order — buffer_streams","text":"","code":"buffer_streams(streams, stream_order = c(3, 4, 5, 6, 7, 8), buffer_dist = 150)"},{"path":"https://gcperk.github.io/skmoose/reference/buffer_streams.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Buffer streams by stream order — buffer_streams","text":"streams sf object streams stream_order vector numeric values stream order, default =  c(3,4,5,6,7,8) buffer_dist numeric buffer distance, default = 150","code":""},{"path":"https://gcperk.github.io/skmoose/reference/buffer_streams.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Buffer streams by stream order — buffer_streams","text":"sf object dissolved buffered stream network","code":""},{"path":"https://gcperk.github.io/skmoose/reference/buffer_streams.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Buffer streams by stream order — buffer_streams","text":"","code":"if (FALSE) { buffer_streams(streams, stream_order = c(3,4,5,6,7,8), buffer_dist = 150 ) }"},{"path":"https://gcperk.github.io/skmoose/reference/calculate_areas.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate area of block — calculate_areas","title":"Calculate area of block — calculate_areas","text":"Calculate area block","code":""},{"path":"https://gcperk.github.io/skmoose/reference/calculate_areas.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate area of block — calculate_areas","text":"","code":"calculate_areas(blockno, aoi, out_dir)"},{"path":"https://gcperk.github.io/skmoose/reference/calculate_areas.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate area of block — calculate_areas","text":"blockno list block id numbers aoi sf aoi entire area block ids out_dir location output folder","code":""},{"path":"https://gcperk.github.io/skmoose/reference/calculate_areas.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate area of block — calculate_areas","text":"table","code":""},{"path":"https://gcperk.github.io/skmoose/reference/calculate_areas.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate area of block — calculate_areas","text":"","code":"if (FALSE) { calculate_area(blockno, in_aoi, out_path) }"},{"path":"https://gcperk.github.io/skmoose/reference/cutblocks_recent.html","id":null,"dir":"Reference","previous_headings":"","what":"Select recent cutblocks for Moose habitat — cutblocks_recent","title":"Select recent cutblocks for Moose habitat — cutblocks_recent","text":"Select recent cutblocks Moose habitat","code":""},{"path":"https://gcperk.github.io/skmoose/reference/cutblocks_recent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select recent cutblocks for Moose habitat — cutblocks_recent","text":"","code":"cutblocks_recent(cutblocks, cutblock_min_yr = 5, cutblock_max_yr = 25)"},{"path":"https://gcperk.github.io/skmoose/reference/cutblocks_recent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select recent cutblocks for Moose habitat — cutblocks_recent","text":"cutblocks sf object cutblocks cutblock_min_yr numeric minimum age since date, default = 5. cutblock_max_yr numeric maximum age since harvest, default = 25","code":""},{"path":"https://gcperk.github.io/skmoose/reference/cutblocks_recent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select recent cutblocks for Moose habitat — cutblocks_recent","text":"sf object filtered cutblocks","code":""},{"path":"https://gcperk.github.io/skmoose/reference/cutblocks_recent.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select recent cutblocks for Moose habitat — cutblocks_recent","text":"","code":"if (FALSE) { cutblocks_recent(cutblocks, 5, 25 ) }"},{"path":"https://gcperk.github.io/skmoose/reference/fires_recent.html","id":null,"dir":"Reference","previous_headings":"","what":"Select recent fire years for Moose habitat — fires_recent","title":"Select recent fire years for Moose habitat — fires_recent","text":"Select recent fire years Moose habitat","code":""},{"path":"https://gcperk.github.io/skmoose/reference/fires_recent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select recent fire years for Moose habitat — fires_recent","text":"","code":"fires_recent(fires, fire_min_yr = 10, fire_max_yr = 25)"},{"path":"https://gcperk.github.io/skmoose/reference/fires_recent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select recent fire years for Moose habitat — fires_recent","text":"fires sf object fires fire_min_yr numeric minimum age since fire, default = 10. fire_max_yr numeric maximum age since fire, default = 25","code":""},{"path":"https://gcperk.github.io/skmoose/reference/fires_recent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select recent fire years for Moose habitat — fires_recent","text":"sf object filtered fires","code":""},{"path":"https://gcperk.github.io/skmoose/reference/fires_recent.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select recent fire years for Moose habitat — fires_recent","text":"","code":"if (FALSE) { fires_recent(fires, 10, 25 ) }"},{"path":"https://gcperk.github.io/skmoose/reference/get_basedata.html","id":null,"dir":"Reference","previous_headings":"","what":"Get base data required from bc data catalogue — get_basedata","title":"Get base data required from bc data catalogue — get_basedata","text":"Get base data required bc data catalogue","code":""},{"path":"https://gcperk.github.io/skmoose/reference/get_basedata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get base data required from bc data catalogue — get_basedata","text":"","code":"get_basedata(in_aoi, out_path, overwrite = FALSE)"},{"path":"https://gcperk.github.io/skmoose/reference/get_basedata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get base data required from bc data catalogue — get_basedata","text":"in_aoi sf object containing polygon area interest extract out_path file folder location raw data saved (gpkg) overwrite TRUE FALSE wish overwrite existing data","code":""},{"path":"https://gcperk.github.io/skmoose/reference/get_basedata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get base data required from bc data catalogue — get_basedata","text":"series geopackages used base data moose strtatification","code":""},{"path":"https://gcperk.github.io/skmoose/reference/get_basedata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get base data required from bc data catalogue — get_basedata","text":"","code":"if (FALSE) { get_basedata(in_aoi, out_path) }"},{"path":"https://gcperk.github.io/skmoose/reference/high_elev.html","id":null,"dir":"Reference","previous_headings":"","what":"Get high elevation areas — high_elev","title":"Get high elevation areas — high_elev","text":"Get high elevation areas","code":""},{"path":"https://gcperk.github.io/skmoose/reference/high_elev.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get high elevation areas — high_elev","text":"","code":"high_elev(dem, elev_thresh = 1300)"},{"path":"https://gcperk.github.io/skmoose/reference/high_elev.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get high elevation areas — high_elev","text":"dem tif elevation data elev_thresh default elevation moose unlikely pass, default = 1300m","code":""},{"path":"https://gcperk.github.io/skmoose/reference/high_elev.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get high elevation areas — high_elev","text":"geopackage single polygon shows elevation given threshold","code":""},{"path":"https://gcperk.github.io/skmoose/reference/high_elev.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get high elevation areas — high_elev","text":"","code":"if (FALSE) { high_elev(dem, 1300) }"},{"path":"https://gcperk.github.io/skmoose/reference/merge_habit.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge habitat areas — merge_habit","title":"Merge habitat areas — merge_habit","text":"Merge habitat areas","code":""},{"path":"https://gcperk.github.io/skmoose/reference/merge_habit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge habitat areas — merge_habit","text":"","code":"merge_habit(tmp_aoi, temp_out_dir)"},{"path":"https://gcperk.github.io/skmoose/reference/merge_habit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge habitat areas — merge_habit","text":"tmp_aoi sf object aoi interest temp_out_dir file path prepared spatial files","code":""},{"path":"https://gcperk.github.io/skmoose/reference/merge_habit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge habitat areas — merge_habit","text":"TRUE","code":""},{"path":"https://gcperk.github.io/skmoose/reference/merge_habit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge habitat areas — merge_habit","text":"","code":"if (FALSE) { merge_nonhabitat(tmp_aoi, temp_out_dir) }"},{"path":"https://gcperk.github.io/skmoose/reference/merge_nonhabit.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge uninhabitable areas — merge_nonhabit","title":"Merge uninhabitable areas — merge_nonhabit","text":"Merge uninhabitable areas","code":""},{"path":"https://gcperk.github.io/skmoose/reference/merge_nonhabit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge uninhabitable areas — merge_nonhabit","text":"","code":"merge_nonhabit(tmp_aoi, temp_out_dir)"},{"path":"https://gcperk.github.io/skmoose/reference/merge_nonhabit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge uninhabitable areas — merge_nonhabit","text":"tmp_aoi sf object aoi interest temp_out_dir file path prepared spatial files","code":""},{"path":"https://gcperk.github.io/skmoose/reference/merge_nonhabit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge uninhabitable areas — merge_nonhabit","text":"TRUE","code":""},{"path":"https://gcperk.github.io/skmoose/reference/merge_nonhabit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge uninhabitable areas — merge_nonhabit","text":"","code":"if (FALSE) { merge_nonhabitat(tmp_aoi, temp_out_dir) }"},{"path":"https://gcperk.github.io/skmoose/reference/skmoose-package.html","id":null,"dir":"Reference","previous_headings":"","what":"skmoose: Stratifies Moose Survey Blocks — skmoose-package","title":"skmoose: Stratifies Moose Survey Blocks — skmoose-package","text":"Extract required base data assess moose inaccessible areas mooose browse areas given area interest. package outputs table assess high, medium low predicted moose habitat.","code":""},{"path":[]},{"path":"https://gcperk.github.io/skmoose/reference/skmoose_example.html","id":null,"dir":"Reference","previous_headings":"","what":"helper function to get local file.path for test package dataset. — skmoose_example","title":"helper function to get local file.path for test package dataset. — skmoose_example","text":"helper function get local file.path test package dataset.","code":""},{"path":"https://gcperk.github.io/skmoose/reference/skmoose_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"helper function to get local file.path for test package dataset. — skmoose_example","text":"","code":"skmoose_example(path = NULL)"},{"path":"https://gcperk.github.io/skmoose/reference/skmoose_example.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"helper function to get local file.path for test package dataset. — skmoose_example","text":"path default location NULL","code":""},{"path":"https://gcperk.github.io/skmoose/reference/skmoose_example.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"helper function to get local file.path for test package dataset. — skmoose_example","text":"TRUE","code":""},{"path":"https://gcperk.github.io/skmoose/reference/skmoose_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"helper function to get local file.path for test package dataset. — skmoose_example","text":"","code":"if (FALSE) { skmoose_example() }"},{"path":"https://gcperk.github.io/skmoose/reference/steep_slope.html","id":null,"dir":"Reference","previous_headings":"","what":"Create steep slope exclusion layer — steep_slope","title":"Create steep slope exclusion layer — steep_slope","text":"Create steep slope exclusion layer","code":""},{"path":"https://gcperk.github.io/skmoose/reference/steep_slope.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create steep slope exclusion layer — steep_slope","text":"","code":"steep_slope(dem, slope_thresh = 55)"},{"path":"https://gcperk.github.io/skmoose/reference/steep_slope.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create steep slope exclusion layer — steep_slope","text":"dem elevation rast slope_thresh numeric threshold moose unlikley occur (degrees), default 55.","code":""},{"path":"https://gcperk.github.io/skmoose/reference/steep_slope.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create steep slope exclusion layer — steep_slope","text":"sf object polygon rrepresenting higher threshold area","code":""},{"path":"https://gcperk.github.io/skmoose/reference/steep_slope.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create steep slope exclusion layer — steep_slope","text":"","code":"if (FALSE) { steep_slope(dem, 55) }"},{"path":"https://gcperk.github.io/skmoose/reference/vri_browse.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter Moose Browse Species — vri_browse","title":"Filter Moose Browse Species — vri_browse","text":"Filter Moose Browse Species","code":""},{"path":"https://gcperk.github.io/skmoose/reference/vri_browse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter Moose Browse Species — vri_browse","text":"","code":"vri_browse(vri, species_codes = c(\"AT\", \"AC\", \"EP\", \"SB\"))"},{"path":"https://gcperk.github.io/skmoose/reference/vri_browse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter Moose Browse Species — vri_browse","text":"vri vri file gpkg containing fields SPECIES_CD_1 species_codes species codes include. Default c(\"\", \"AC\",\"EP\",\"SB\")","code":""},{"path":"https://gcperk.github.io/skmoose/reference/vri_browse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter Moose Browse Species — vri_browse","text":"sf object single polygon deciduous browse","code":""},{"path":"https://gcperk.github.io/skmoose/reference/vri_browse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter Moose Browse Species — vri_browse","text":"","code":"if (FALSE) { vri_browse(vri, species_codes = c(\"AT\", \"AC\",\"EP\",\"SB\")) }"}]
